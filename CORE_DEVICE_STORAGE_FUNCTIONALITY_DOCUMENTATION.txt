================================================================================
                 ZEPTAC IOT DEVICE STORAGE & MANAGEMENT CORE FUNCTIONALITY
================================================================================

SYSTEM OVERVIEW:
===============
This document describes the core functionality for storing device information 
and device settings in the database. The system provides comprehensive device 
management with complete settings payload support, ensuring that whenever any 
single setting is changed, the server can provide the entire device configuration.

✅ CORE FUNCTIONALITY IMPLEMENTED:
- ✅ Device Registration and Storage
- ✅ Complete Device Settings Storage  
- ✅ Settings Retrieval in Standardized Format
- ✅ Parameter Updates with Complete Payload
- ✅ Database Integration with MongoDB
- ✅ RESTful API Endpoints
- ✅ MQTT Integration Ready
- ✅ Command Tracking and Acknowledgment
- ✅ Configuration History
- ✅ Bulk Operations Support

================================================================================
                               DATABASE STRUCTURE
================================================================================

MONGODB COLLECTIONS:
===================

1. DEVICES COLLECTION
   Document Structure:
   {
     _id: ObjectId,
     deviceId: String (unique),     // Device identifier (e.g., "ZEPTAC001")
     name: String,                  // Human-readable name
     type: String,                  // "sensor", "actuator", "gateway"
     mqtt: {                        // MQTT configuration
       brokerUrl: String,
       topics: [String],
       username: String,
       password: String,
       options: Object
     },
     location: {                    // GPS coordinates
       latitude: Number,
       longitude: Number
     },
     status: String,                // "active", "inactive", "error"
     lastSeen: Date,
     
     // *** CORE: Complete Device Settings Storage ***
     configuration: {
       currentMode: String,         // Current operation mode
       deviceSettings: {            // COMPLETE SETTINGS OBJECT
         electrode: Number,         // Default: 0
         shuntVoltage: Number,      // Default: 25
         shuntCurrent: Number,      // Default: 999
         referenceFail: Number,     // Default: 30
         referenceUP: Number,       // Default: 300
         referenceOV: Number,       // Default: 60
         interruptOnTime: Number,   // Default: 100
         interruptOffTime: Number,  // Default: 100
         interruptStartTimeStamp: String,
         interruptStopTimeStamp: String,
         dpolInterval: String,      // Default: "00:00:00"
         depolarizationStartTimeStamp: String,
         depolarizationStopTimeStamp: String,
         instantMode: Number,       // Default: 0
         instantStartTimeStamp: String,  // Default: "19:04:00"
         instantEndTimeStamp: String     // Default: "00:00:00"
       },
       lastConfigUpdate: Date,      // Timestamp of last settings change
       source: String,              // Source of last update
       configHistory: [{            // Change history
         timestamp: Date,
         settings: Object,          // Complete settings at that time
         source: String,            // Who made the change
         changedFields: [String]    // Which fields were modified
       }],
       lastCommand: {               // Last command sent
         type: String,
         data: Object,
         timestamp: Date
       }
     },
     
     // Device Synchronization Status
     syncStatus: {
       isOnline: Boolean,
       lastSyncAttempt: Date,
       lastSuccessfulSync: Date,
       pendingRequests: [String],   // Array of command IDs
       syncErrors: [Object]         // Error history
     },
     
     createdAt: Date,
     updatedAt: Date
   }

================================================================================
                              CORE SERVICE CLASSES
================================================================================

1. DEVICE MANAGEMENT SERVICE
============================

File: services/deviceManagementService.js

Core Methods:

A) registerDevice(deviceData)
-----------------------------
Purpose: Register a new device in the database with default settings
Input: { deviceId, name, type, brokerUrl?, topics?, location?, initialSettings? }
Output: Complete device object
Database: Creates new device document with default settings

B) storeDeviceSettings(deviceId, settings, source)
--------------------------------------------------
Purpose: Store complete device settings in database
Input: 
  - deviceId: String
  - settings: Object (partial or complete settings)
  - source: String ("api_request", "device_response", "command_sent", etc.)
Process:
  1. Merge new settings with existing settings
  2. Update device configuration in database
  3. Add entry to configuration history
  4. Update lastConfigUpdate timestamp
Output: Updated device object

C) getDeviceSettings(deviceId)
------------------------------
Purpose: Retrieve device settings in standardized payload format
Input: deviceId: String
Output: Complete standardized payload:
  {
    "Device ID": "deviceId",
    "Message Type": "settings",
    "sender": "Server",
    "Parameters": {
      "Electrode": 0,
      "Shunt Voltage": 25,
      // ... all 16 parameters
    }
  }

D) updateDeviceParameters(deviceId, parameters, commandId)
----------------------------------------------------------
Purpose: Update specific parameters and return complete settings
Input:
  - deviceId: String
  - parameters: Object (parameters to update)
  - commandId: String (optional tracking ID)
Process:
  1. Get current settings from database
  2. Map external parameter names to internal fields
  3. Merge updated parameters with existing settings
  4. Store complete updated settings
  5. Track command if commandId provided
Output: Complete settings in standardized format

E) getAllDevicesWithSettings()
------------------------------
Purpose: Get all devices with their current settings
Output: Array of device objects with settings

F) deleteDevice(deviceId)
-------------------------
Purpose: Remove device and all its settings from database
Input: deviceId: String
Output: Boolean success status

================================================================================
                                API ENDPOINTS
================================================================================

BASE URL: /api/device-management

1. DEVICE REGISTRATION
======================

POST /register
Body: {
  "deviceId": "DEVICE_001",
  "name": "Device Name",
  "type": "sensor",
  "location": { "latitude": 40.7128, "longitude": -74.0060 },
  "initialSettings": {
    "electrode": 1,
    "shuntVoltage": 30
  }
}

Response: {
  "success": true,
  "message": "Device registered successfully",
  "data": {
    "deviceId": "DEVICE_001",
    "name": "Device Name",
    "type": "sensor",
    "status": "inactive",
    "createdAt": "2025-10-29T05:44:59.000Z"
  }
}

2. GET DEVICE SETTINGS
======================

GET /:deviceId/settings

Response: {
  "success": true,
  "data": {
    "Device ID": "DEVICE_001",
    "Message Type": "settings",
    "sender": "Server",
    "Parameters": {
      "Electrode": 0,
      "Shunt Voltage": 25,
      "Shunt Current": 999,
      // ... all parameters
    }
  }
}

3. UPDATE DEVICE SETTINGS
=========================

PUT /:deviceId/settings
Body: {
  "parameters": {
    "Electrode": 2,
    "Shunt Voltage": 35,
    "Reference Fail": 40
  },
  "sendToDevice": true
}

Response: {
  "success": true,
  "message": "Device settings updated successfully",
  "data": {
    "commandId": "uuid-here",
    "settings": {
      "Device ID": "DEVICE_001",
      "Message Type": "settings",
      "sender": "Server",
      "Parameters": {
        // Complete updated settings
      }
    },
    "sentToDevice": true
  }
}

4. STORE SETTINGS (DATABASE ONLY)
=================================

POST /:deviceId/settings/store
Body: {
  "settings": {
    "electrode": 3,
    "shuntVoltage": 50
  },
  "source": "api_request"
}

Response: {
  "success": true,
  "message": "Device settings stored successfully",
  "data": {
    "deviceId": "DEVICE_001",
    "lastUpdate": "2025-10-29T05:44:59.000Z",
    "source": "api_request"
  }
}

5. GET ALL DEVICES
==================

GET /devices

Response: {
  "success": true,
  "data": [
    {
      "deviceId": "DEVICE_001",
      "name": "Device Name",
      "type": "sensor",
      "status": "active",
      "isOnline": true,
      "settings": {
        // Complete device settings
      },
      "lastUpdate": "2025-10-29T05:44:59.000Z"
    }
  ],
  "count": 1
}

6. BULK UPDATE
==============

POST /bulk-update
Body: {
  "devices": ["DEVICE_001", "DEVICE_002"],
  "parameters": {
    "Interrupt ON Time": 150,
    "Interrupt OFF Time": 150
  },
  "sendToDevice": true
}

Response: {
  "success": true,
  "message": "Bulk update completed. 2/2 devices updated successfully",
  "data": {
    "commandId": "uuid-here",
    "results": [
      {
        "deviceId": "DEVICE_001",
        "success": true,
        "settings": { /* complete settings */ }
      },
      {
        "deviceId": "DEVICE_002", 
        "success": true,
        "settings": { /* complete settings */ }
      }
    ],
    "successCount": 2,
    "totalCount": 2
  }
}

================================================================================
                             PARAMETER MAPPING SYSTEM
================================================================================

EXTERNAL TO INTERNAL FIELD MAPPING:
===================================

The system supports both external (user-facing) and internal (database) parameter names:

External Parameter Name          Internal Field Name
------------------------          -------------------
"Electrode"                  ->   electrode
"Shunt Voltage"              ->   shuntVoltage
"Shunt Current"              ->   shuntCurrent
"Reference Fail"             ->   referenceFail
"Reference UP"               ->   referenceUP
"Reference OV"               ->   referenceOV
"Interrupt ON Time"          ->   interruptOnTime
"Interrupt OFF Time"         ->   interruptOffTime
"Interrupt Start TimeStamp"  ->   interruptStartTimeStamp
"Interrupt Stop TimeStamp"   ->   interruptStopTimeStamp
"DPOL Interval"              ->   dpolInterval
"Depolarization Start TimeStamp" -> depolarizationStartTimeStamp
"Depolarization Stop TimeStamp"  -> depolarizationStopTimeStamp
"Instant Mode"               ->   instantMode
"Instant Start TimeStamp"    ->   instantStartTimeStamp
"Instant End TimeStamp"      ->   instantEndTimeStamp

This allows for:
1. User-friendly external API using descriptive names
2. Consistent internal database storage using camelCase
3. Automatic conversion between formats

================================================================================
                              MQTT INTEGRATION
================================================================================

MQTT SERVICE INTEGRATION:
========================

The Device Management Service integrates with the MQTT Service to:

1. Send Complete Settings Payloads:
   - When device settings are updated via API
   - Topic: device/{deviceId}/settings
   - Payload: Complete standardized settings object

2. Track Command Acknowledgments:
   - Command IDs for tracking message delivery
   - Timeout handling for unacknowledged commands
   - Success/failure status tracking

3. Synchronization Status:
   - Online/offline device status
   - Last successful sync timestamps
   - Error tracking and recovery

Example MQTT Message:
{
  "Device ID": "ZEPTAC001",
  "Message Type": "settings",
  "sender": "Server",
  "CommandId": "uuid-command-id",
  "Parameters": {
    "Electrode": 2,
    "Shunt Voltage": 35,
    // ... complete parameter set
  }
}

================================================================================
                              TESTING & VALIDATION
================================================================================

CORE FUNCTIONALITY TESTS:
=========================

1. Device Registration Test:
   ✅ Registers new device with default settings
   ✅ Prevents duplicate device registration
   ✅ Validates required fields

2. Settings Storage Test:
   ✅ Stores partial settings updates
   ✅ Maintains complete settings object
   ✅ Tracks configuration history
   ✅ Updates timestamps correctly

3. Settings Retrieval Test:
   ✅ Returns complete settings in standardized format
   ✅ Includes all 16 required parameters
   ✅ Uses correct external parameter names

4. Parameter Update Test:
   ✅ Updates specific parameters
   ✅ Returns complete settings payload
   ✅ Maps parameter names correctly
   ✅ Tracks command IDs

5. Bulk Operations Test:
   ✅ Updates multiple devices simultaneously
   ✅ Handles partial failures gracefully
   ✅ Returns detailed results

Test Commands:
- node test-core-functionality.js
- node test-device-management-system.js

================================================================================
                              USAGE EXAMPLES
================================================================================

1. BASIC DEVICE SETUP:
======================

// 1. Register a new device
POST /api/device-management/register
{
  "deviceId": "SENSOR_001",
  "name": "Temperature Sensor",
  "type": "sensor"
}

// 2. Set initial configuration
PUT /api/device-management/SENSOR_001/settings
{
  "parameters": {
    "Electrode": 1,
    "Shunt Voltage": 30,
    "Reference Fail": 35
  },
  "sendToDevice": true
}

// 3. Get complete current settings
GET /api/device-management/SENSOR_001/settings

2. SETTINGS UPDATE WORKFLOW:
===========================

// Update any single parameter
PUT /api/device-management/SENSOR_001/settings
{
  "parameters": {
    "Shunt Voltage": 40  // Only changing one parameter
  },
  "sendToDevice": true
}

// System automatically:
// 1. Updates the single parameter in database
// 2. Retrieves ALL current settings
// 3. Sends COMPLETE payload to device via MQTT
// 4. Device receives full configuration for validation

3. BULK CONFIGURATION:
=====================

// Update multiple devices at once
POST /api/device-management/bulk-update
{
  "devices": ["SENSOR_001", "SENSOR_002", "SENSOR_003"],
  "parameters": {
    "Interrupt ON Time": 120,
    "Interrupt OFF Time": 120,
    "Reference UP": 350
  },
  "sendToDevice": true
}

================================================================================
                              SYSTEM BENEFITS
================================================================================

ADVANTAGES OF THIS IMPLEMENTATION:
==================================

1. ✅ COMPLETE CONTEXT: Device always receives full configuration
2. ✅ DATA CONSISTENCY: Single source of truth in database
3. ✅ VALIDATION SUPPORT: Device can validate entire parameter set
4. ✅ EASY DEBUGGING: Complete payloads simplify troubleshooting
5. ✅ SCALABILITY: Supports multiple devices efficiently
6. ✅ FLEXIBILITY: Easy to add new parameters
7. ✅ RELIABILITY: Database persistence with history tracking
8. ✅ STANDARDIZATION: Consistent message format
9. ✅ BULK OPERATIONS: Efficient multi-device management
10. ✅ REAL-TIME SYNC: MQTT integration for immediate updates

DEVICE BENEFITS:
================

- Device receives complete configuration context
- Can validate parameter interdependencies
- Simplified firmware logic (always expect complete settings)
- Reduced chance of partial configuration states
- Easy configuration backup and restore

SERVER BENEFITS:
================

- Centralized device configuration management
- Complete audit trail of all changes
- Efficient bulk operations
- Real-time device synchronization
- Comprehensive error tracking and recovery

================================================================================
                              FUTURE ENHANCEMENTS
================================================================================

PLANNED IMPROVEMENTS:
====================

1. Configuration Templates:
   - Predefined setting templates for device types
   - Quick device setup with standard configurations

2. Configuration Validation:
   - Parameter range validation
   - Interdependency checking
   - Configuration conflict detection

3. Advanced Bulk Operations:
   - Scheduled configuration deployments
   - Rollback capabilities
   - Configuration diff analysis

4. Enhanced Monitoring:
   - Configuration drift detection
   - Device compliance reporting
   - Performance metrics

5. Integration Features:
   - REST API webhooks
   - Event-driven configuration updates
   - Third-party system integration

================================================================================

CONCLUSION:
==========
This core functionality provides a robust, scalable foundation for device 
management with complete settings payload support. The system ensures that 
devices always receive complete configuration context while maintaining 
data consistency and providing comprehensive tracking capabilities.

For technical support or questions about implementation details, refer to 
the test files and API documentation provided with this system.

Last Updated: October 29, 2025
Version: 1.0
System Status: ✅ FULLY FUNCTIONAL & TESTED
================================================================================